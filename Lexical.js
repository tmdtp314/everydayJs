/*
   function 키워드를 만나면 function 오브젝트를 생성한다.
   스코프를 function object의 스코프에 설정한다.
   함수 밖의 스코프가 결정된다. ----> 정적환경
   (function 키워드를 만날 때 함수 밖의 스코프가 이미 결정된다 .)


*/

var point =123;
function book(){ //2. 이 때 스코프가 결정된다. 
    function getPoint(){};
}
book(); //1. 이 때 스코프가 결정되는 게 아니라
        // 함수가 호출되면 외부 function object에 설정된 스코프를
        // 외부 렉시컬 환경 참조에 설정한다. 
        // 함수 안,밖에 있는 변수와 함수를 하나의 렉시칼 정적 개념으로 사용할 수 있다. 
        // 이거 덩어리 하나로 메모리 올라가면 됨

/*   but var 키워드 문제가 있다.
    함수에서 var키워드를 사용하지 않고 변수를 선언하면 글로벌 오브젝트에 설정됨
    이건 스코프 체인 개념이다. 
    렉시컬 환경 구조에 맞지 않음
    
    -ES5 --> "use strict" 사용하는 걸로 해결

    -ES6 --> let변수, const변수 사용 변수 자체에 스코프 제약을 둠

*/

/*  자바스크립트의 동적 환경
   with문 : with문을 만날 때마다 스코프가 만들어진다.
   eval()함수

   with문은 strict모드에서 에러발생한다. 

   eval()함수는 보안에 문제가 있다. ---> 피하는 게 좋다. (마지막 카드)


*/

